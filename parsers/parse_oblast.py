import os 
from openpyxl import load_workbook
from objects.result import Result
import tools 

# First, let's do some pre-processing. I notice that some files
# are called "grade 11" instead of grade11.

# generated by chatgpt
def rename_files(directory):
    """Rename files in the given directory by removing spaces from their names.

    Args:
        directory (str): A string specifying the directory path containing the files to be renamed.

    Returns:
        None. This function renames files in place.

    Raises:
        OSError: If a file could not be renamed.
    """
    for root, _, files in os.walk(directory):
        for file in files:
            if file == '.DS_Store': continue
            old_path = os.path.join(root, file)
            new_path = os.path.join(root, file.replace(" ", ""))
            os.rename(old_path, new_path)

# Unfortunately, files with results do not contain info on max scores. So I need 
# to hard code them. Duh.

MAX_SCORE = {
    9: {1: 10, 2:14, 3:14, 4:16, 5:16},
    10: {1:10, 2:12, 3:10, 4:12, 5:11, 6:15},
    11: {1:10, 2:10, 3:12, 4:10, 5:13, 6:15}
}

PATH = "data/results/oblast/"
def parse_results():
    """
    Parses the results of a competition from Excel files for multiple regions and grades.
    Returns two dictionaries: 'bygrade' contains the results sorted by grade level, and 'byoblast'
    contains the results sorted by oblast and then by grade level.

    The function loads the Excel files from the directory specified in the global variable 'PATH',
    and extracts the results for each participant, storing them in instances of the 'Result' class.

    The function iterates over all oblasts (directories) and for each oblast, it iterates over all
    grades (11, 10, and 9). For each grade and oblast, it loads the corresponding Excel file and extracts
    the data for each participant. It creates a 'Result' instance for each participant, and stores the
    instance in the 'bygrade' and 'byoblast' dictionaries.

    The 'Result' class has the following attributes:
        - name: the participant's name
        - total: the total score
        - only_total: a flag indicating whether only the total score was provided
        - oblast: the participant's oblast
        - olymp_name: the name of the competition
        - problemX: a dictionary containing the absolute score, maximum score, and relative score
          for problem X, where X is an integer between 1 and the number of problems in the competition
        - numprobs: the number of problems attempted by the participant
    """
    bygrade, byoblast = {}, {}
    oblasts = [f for f in os.listdir(PATH) if os.path.isdir(os.path.join(PATH, f))]
    for oblast in oblasts:
        for grade in (11, 10, 9):
            wb = load_workbook(os.path.join(PATH, oblast, f"grade{grade}.xlsx"))
            ws = wb['Лист1']
            row = 3
            while True:
                re = Result()
                re.name = ws['C'+str(row)].value
                re.total = 0
                re.only_total = False
                re.oblast = oblast
                re.olymp_name = "oblast"
                skip = False
                if re.name is not None:
                    col = 'E'
                    while True:
                        if (cell:=ws[col+'2'].value) is not None and 'адача' in cell:
                            num = int(ws[col+'2'].value.split()[0])
                            maxscore = MAX_SCORE[grade][num]
                            if ws[col+str(row)].value is None and col == 'E':
                                skip = True
                                break #skip participant
                            res = float(ws[col+str(row)].value)
                            # print(res, oblast, grade, col, row)
                            if res > maxscore or (num+1 in MAX_SCORE[grade] and # the next column should have another problem grade
                                                  ws[tools.getNextCol(col)+str(row)].value is None): #but instead it's empty
                                re.total = res
                                re.only_total = True
                                break
                            setattr(re, f"problem{num}", {'abs': res, 'max': maxscore, 'rel': res/maxscore})
                            re.total += res
                            # print(getattr(re, f"problem{num}"))
                            re.numprobs = num
                        else:
                            break
                        col = tools.getNextCol(col)
                else:
                    break
                if not skip:
                    bygrade.setdefault(grade, []).append(re)
                    byoblast.setdefault(oblast, {}).setdefault(grade, []).append(re)
                row += 1
    return bygrade, byoblast
    


if __name__ == "__main__":
    directory = "data/results/oblast/"
    # rename_files(directory)
    parse_results()