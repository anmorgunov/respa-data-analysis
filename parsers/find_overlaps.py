

# Group by attribute (EXACT MATCH)

def find_exact_matches(data, attribute):
    attr_to_obj = {}
    for sublist in data:
        for obj in sublist:
            if getattr(obj, attribute) is None: continue
            attr_to_obj.setdefault(getattr(obj, attribute), []).append(obj)

    # Find all emails with multiple objects
    duplicates = [attr_to_obj[attr] for attr in attr_to_obj if len(attr_to_obj[attr]) > 1]

    # Print the duplicates
    for objects in duplicates:
        print(f"Duplicate objects with {attribute}", getattr(objects[0], attribute))
        for obj in objects:
            print("-", obj.name)
    print(f"Found {len(duplicates)} exact matches")

from fuzzywuzzy import fuzz 

def find_similar_matches(data, attribute, threshold=90, testing=True):
    attr_to_obj = {}
    for sublist in data:
        for obj in sublist:
            if getattr(obj, attribute) is None: continue
            for attr in attr_to_obj.keys():
                score = fuzz.token_set_ratio(getattr(obj, attribute), attr)
                if score >= threshold:
                    attr_to_obj[attr].append(obj)
                    break
            else:
                attr_to_obj[getattr(obj, attribute)] = [obj]

    # Find all attributes with multiple objects
    duplicates = [attr_to_obj[attr] for attr in attr_to_obj if len(attr_to_obj[attr]) > 1]
    
    if testing:
    # Print the duplicates
        for objects in duplicates:
            print(f"Objects with similar {attribute}:", getattr(objects[0], attribute))
            for obj in objects:
                print("-", obj.name)
        print(f"Found {len(duplicates)} similar matches")
    return {attr:objs for attr, objs in attr_to_obj.items() if len(objs) > 1}


if __name__ == "__main__":
    from survey import parse_responses

    STAGES = "region oblast respa".split()
    RAW = []
    for stage in STAGES:
        RAW.append(parse_responses(stage)[0])
    # find_exact_matches("email") # finds 11
    # find_exact_matches("name")  # finds 16

    find_similar_matches(RAW, "name") # finds 19 (also found one duplicate response which I fixed!)
    # find_similar_matches generated by ChatGPT
